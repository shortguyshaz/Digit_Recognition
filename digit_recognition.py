# -*- coding: utf-8 -*-
"""Digit Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W7hB67gwWHiXQbtZS-L2RS-ukWo7VqIF
"""

from keras.datasets import mnist
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from keras.models import load_model
import matplotlib.pyplot as plt
import imageio
import numpy as np
from google.colab import files
import cv2

(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

image_index = 35
print(y_train[image_index])
plt.imshow(x_train[image_index], cmap = 'Greys')
plt.show()

print(x_train.shape)
print(x_test.shape)

print(y_train[: image_index + 1])

img_rows, img_cols = 28, 28

x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)

x_train = x_train / 255
x_test = x_test / 255

num_classes = 10

y_train = to_categorical(y_train, num_classes)
y_test = to_categorical(y_test, num_classes)

model = Sequential()
model.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape = (img_rows, img_cols, 1)))

model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Dropout(0.25))
model.add(Flatten())

model.add(Dense(128, activation = 'relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation = 'softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

batch_size = 128
epochs = 10

model.fit(x_train, y_train, batch_size = batch_size, epochs=epochs, verbose=1, validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test, verbose=0)
print('test loss: ', score[0])
print('test accuracy: ', score[1])
model.save("test_model.h5")

uploaded = files.upload()
#im = imageio.imread("https://i.imgur.com/a3Rql9C.png")

im = cv2.imread('a3Rql9C.png')
gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)

gray = np.dot(im[..., : 3], [0.299, 0.587, 0.114])
plt.imshow(gray, cmap=plt.get_cmap('gray'))
plt.show()

gray = gray.reshape(1, img_rows, img_cols, 1)

gray /= 255

model = load_model("test_model.h5")

prediction = model.predict(gray)
print(prediction.argmax())

